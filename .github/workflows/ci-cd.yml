name: Deploy to Server
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Detener contenedores anteriores
            docker stop en-ruta-api en-ruta-db || true
            docker rm en-ruta-api en-ruta-db || true

            # Crear red si no existe
            docker network create en-ruta-network || true

            # Ejecutar PostgreSQL en contenedor
            docker run -d \
              --name en-ruta-db \
              --network en-ruta-network \
              -e POSTGRES_DB=enruta_db \
              -e POSTGRES_USER=enruta \
              -e POSTGRES_PASSWORD=enruta123 \
              -v postgres_data:/var/lib/postgresql/data \
              -p 5432:5432 \
              --restart unless-stopped \
              postgres:15

            # Esperar a que PostgreSQL est√© listo
            sleep 10

            # Login en el registry desde el servidor
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Descargar nueva imagen de la API
            docker pull ghcr.io/${{ github.repository }}:latest

            # Ejecutar API conectada a PostgreSQL
            docker run -d \
              --name en-ruta-api \
              --network en-ruta-network \
              -p 3000:3000 \
              -e DATABASE_URL="postgresql://enruta:enruta123@en-ruta-db:5432/enruta_db?schema=public" \
              -e DIRECT_URL="postgresql://enruta:enruta123@en-ruta-db:5432/enruta_db?schema=public" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e JWT_EXPIRATION="${{ secrets.JWT_EXPIRATION }}" \
              -e EMAIL_HOST="${{ secrets.EMAIL_HOST }}" \
              -e EMAIL_PORT="${{ secrets.EMAIL_PORT }}" \
              -e EMAIL_SECURE="${{ secrets.EMAIL_SECURE }}" \
              -e EMAIL_USER="${{ secrets.EMAIL_USER }}" \
              -e EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" \
              -e EMAIL_FROM_NAME="${{ secrets.EMAIL_FROM_NAME }}" \
              -e EMAIL_FROM_ADDRESS="${{ secrets.EMAIL_FROM_ADDRESS }}" \
              --restart unless-stopped \
              ghcr.io/${{ github.repository }}:latest

            echo "‚úÖ Desplegado en http://${{ secrets.SERVER_HOST }}:3000"
            echo "üóÑÔ∏è PostgreSQL en contenedor en puerto 5432"
