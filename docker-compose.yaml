networks:
  app-network:
    driver: bridge

services:
  my-service-production:
    container_name: en-ruta-api
    build:
      target: production
      context: .
      args:
        NODE_VERSION: 20-alpine3.19
        DUMB_INIT_VERSION: 1.2.5-r2
        PORT: ${PORT:-3000}
    ports:
      - '80:${PORT:-3000}'
    env_file: ./.env
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '512m'
        reservations:
          cpus: '0.25'
          memory: '256m'
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:${PORT:-3000}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  my-service-dev:
    container_name: en-ruta-api-dev
    restart: unless-stopped
    build:
      target: dev
      context: .
      args:
        NODE_VERSION: 20-alpine3.19
        DUMB_INIT_VERSION: 1.2.5-r2
        PORT: ${PORT:-3000}
    ports:
      - '3000:${PORT:-3000}'
    volumes:
      - ./src:/app/src
      - ./node_modules:/app/node_modules
    depends_on:
      - db-dev
    env_file: ./.env
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '512m'
        reservations:
          cpus: '0.25'
          memory: '256m'
    networks:
      - app-network

  db-dev:
    container_name: db-dev
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER_DEV:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_DEV:-root}
      POSTGRES_DB: ${POSTGRES_DB_DEV:-development_db}
    ports:
      - '5434:5432'
    volumes:
      - db-data-dev:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER_DEV:-postgres} -d ${POSTGRES_DB_DEV:-development_db}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  db-data-dev:
