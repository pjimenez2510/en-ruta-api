generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELOS PRINCIPALES

model Tenant {
  id              Int      @id @default(autoincrement())
  nombre          String
  identificador   String   @unique // Para subdominios/rutas
  logoUrl         String?
  colorPrimario   String?
  colorSecundario String?
  sitioWeb        String?
  emailContacto   String?
  telefono        String?
  fechaRegistro   DateTime @default(now())
  activo          Boolean  @default(true)

  // Relaciones
  usuarios                UsuarioTenant[]
  buses                   Bus[]
  tiposAsiento            TipoAsiento[]
  rutas                   Ruta[]
  configuracionDescuentos ConfiguracionDescuento[]
  viajes                  Viaje[] // NUEVO: reemplaza HojaTrabajo
  ventas                  Venta[]
  boletos                 Boleto[]
  configuraciones         Configuracion[]
  notificaciones          Notificacion[]
  metodosPago             MetodoPago[]

  @@map("tenants")
}

model Usuario {
  id            Int         @id @default(autoincrement())
  username      String      @unique
  passwordHash  String
  fechaRegistro DateTime    @default(now())
  ultimoAcceso  DateTime?
  activo        Boolean     @default(true)
  tipoUsuario   TipoUsuario @default(CLIENTE)

  // Relaciones
  tenants                 UsuarioTenant[]
  ventasComprador         Venta[]            @relation("comprador")
  ventasOficinista        Venta[]            @relation("oficinista")
  cliente                 Cliente?
  registrosAbordaje       RegistroAbordaje[] @relation("registrador")
  notificacionesRecibidas Notificacion[]

  @@map("usuarios")
}

model Cliente {
  id                     Int           @id @default(autoincrement())
  nombres                String
  apellidos              String
  tipoDocumento          TipoDocumento @default(CEDULA)
  numeroDocumento        String
  telefono               String?
  email                  String?
  fechaNacimiento        DateTime?
  esDiscapacitado        Boolean       @default(false)
  porcentajeDiscapacidad Decimal?      @db.Decimal(5, 2)
  usuarioId              Int?          @unique
  fechaRegistro          DateTime      @default(now())
  ultimaActualizacion    DateTime      @default(now())
  activo                 Boolean       @default(true)

  // Relaciones
  usuario Usuario? @relation(fields: [usuarioId], references: [id])
  boletos Boleto[]

  @@unique([tipoDocumento, numeroDocumento])
  @@map("clientes")
}

model UsuarioTenant {
  id              Int        @id @default(autoincrement())
  usuarioId       Int
  tenantId        Int
  rol             RolUsuario
  fechaAsignacion DateTime   @default(now())
  activo          Boolean    @default(true)

  // Relaciones
  usuario Usuario @relation(fields: [usuarioId], references: [id])
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  // Relaciones con viajes (reemplaza hojas de trabajo)
  viajesConductor Viaje[] @relation("ViajesConductor")
  viajesAyudante  Viaje[] @relation("ViajesAyudante")

  // Relación con información personal
  infoPersonal PersonalCooperativa?

  @@unique([usuarioId, tenantId, rol])
  @@map("usuarios_tenants")
}

model PersonalCooperativa {
  id                      Int           @id @default(autoincrement())
  usuarioTenantId         Int           @unique
  nombres                 String
  apellidos               String
  tipoDocumento           TipoDocumento @default(CEDULA)
  numeroDocumento         String
  telefono                String?
  email                   String?
  fechaNacimiento         DateTime?
  direccion               String?
  ciudadResidencia        String?
  genero                  String?
  fotoPerfil              String?
  licenciaConducir        String?
  tipoLicencia            String?
  fechaExpiracionLicencia DateTime?
  fechaContratacion       DateTime?
  fechaRegistro           DateTime      @default(now())
  ultimaActualizacion     DateTime      @default(now())
  activo                  Boolean       @default(true)

  // Relación con UsuarioTenant
  usuarioTenant UsuarioTenant @relation(fields: [usuarioTenantId], references: [id], onDelete: Cascade)

  @@map("personal_cooperativa")
}

model Ciudad {
  id        Int      @id @default(autoincrement())
  nombre    String
  provincia String
  latitud   Decimal? @db.Decimal(10, 6)
  longitud  Decimal? @db.Decimal(10, 6)
  activo    Boolean  @default(true)

  // Relaciones simplificadas
  rutasOrigen  Ruta[]       @relation("RutaOrigen")
  rutasDestino Ruta[]       @relation("RutaDestino")
  paradas      ParadaRuta[]

  @@map("ciudades")
}

model ResolucionANT {
  id               Int       @id @default(autoincrement())
  numeroResolucion String
  fechaEmision     DateTime
  fechaVigencia    DateTime?
  documentoUrl     String?
  descripcion      String?
  activo           Boolean   @default(true)

  // Relaciones
  rutas Ruta[]

  @@map("resoluciones_ant")
}

// MODELOS PARA BUSES Y CONFIGURACIÓN DE ASIENTOS

model ModeloBus {
  id             Int     @id @default(autoincrement())
  marca          String
  modelo         String
  tipoChasis     String?
  tipoCarroceria String?
  anioModelo     Int?
  numeroPisos    Int     @default(1)
  descripcion    String?
  esPublico      Boolean @default(true)

  // Relaciones
  plantillasPiso PlantillaPiso[]
  buses          Bus[]

  @@unique([marca, modelo])
  @@map("modelos_bus")
}

model PlantillaPiso {
  id          Int     @id @default(autoincrement())
  modeloBusId Int
  numeroPiso  Int
  filas       Int
  columnas    Int
  descripcion String?
  esPublico   Boolean @default(true)

  // Relaciones
  modeloBus          ModeloBus                   @relation(fields: [modeloBusId], references: [id])
  ubicacionesAsiento UbicacionAsientoPlantilla[]
  pisosBus           PisoBus[]

  @@unique([modeloBusId, numeroPiso])
  @@map("plantillas_piso")
}

model UbicacionAsientoPlantilla {
  id              Int     @id @default(autoincrement())
  plantillaPisoId Int
  fila            Int
  columna         Int
  estaHabilitado  Boolean @default(true)

  // Relaciones
  plantillaPiso PlantillaPiso @relation(fields: [plantillaPisoId], references: [id], onDelete: Cascade)

  @@unique([plantillaPisoId, fila, columna])
  @@map("ubicaciones_asiento_plantilla")
}

model Bus {
  id              Int       @id @default(autoincrement())
  tenantId        Int
  modeloBusId     Int
  numero          Int
  placa           String
  anioFabricacion Int?
  totalAsientos   Int
  fotoUrl         String?
  tipoCombustible String?
  fechaIngreso    DateTime
  estado          EstadoBus @default(ACTIVO)

  // Relaciones
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  modeloBus       ModeloBus           @relation(fields: [modeloBusId], references: [id])
  pisos           PisoBus[]
  viajes          Viaje[] // NUEVO: reemplaza hojasTrabajo
  caracteristicas CaracteristicaBus[]

  @@unique([tenantId, placa])
  @@unique([tenantId, numero])
  @@index([tenantId])
  @@map("buses")
}

model PisoBus {
  id              Int  @id @default(autoincrement())
  busId           Int
  numeroPiso      Int
  plantillaPisoId Int?

  // Relaciones
  bus           Bus            @relation(fields: [busId], references: [id], onDelete: Cascade)
  plantillaPiso PlantillaPiso? @relation(fields: [plantillaPisoId], references: [id])
  asientos      Asiento[]

  @@unique([busId, numeroPiso])
  @@map("pisos_bus")
}

model CaracteristicaBus {
  id     Int    @id @default(autoincrement())
  busId  Int
  nombre String
  valor  String

  // Relaciones
  bus Bus @relation(fields: [busId], references: [id], onDelete: Cascade)

  @@unique([busId, nombre])
  @@map("caracteristicas_bus")
}

model TipoAsiento {
  id           Int     @id @default(autoincrement())
  tenantId     Int
  nombre       String
  descripcion  String?
  factorPrecio Decimal @default(1.00) @db.Decimal(5, 2)
  color        String?
  icono        String?
  activo       Boolean @default(true)

  // Relaciones
  tenant   Tenant    @relation(fields: [tenantId], references: [id])
  asientos Asiento[]

  @@unique([tenantId, nombre])
  @@index([tenantId])
  @@map("tipos_asiento")
}

model Asiento {
  id        Int           @id @default(autoincrement())
  pisoBusId Int
  numero    String
  fila      Int
  columna   Int
  tipoId    Int
  estado    EstadoAsiento @default(DISPONIBLE)
  notas     String?

  // Relaciones
  pisoBus     PisoBus            @relation(fields: [pisoBusId], references: [id])
  tipo        TipoAsiento        @relation(fields: [tipoId], references: [id])
  boletos     Boleto[]
  ocupaciones OcupacionAsiento[] // NUEVO: para gestión de ocupación por segmentos

  @@unique([pisoBusId, numero])
  @@unique([pisoBusId, fila, columna])
  @@map("asientos")
}

// MODELOS SIMPLIFICADOS PARA RUTAS Y VIAJES

model Ruta {
  id              Int      @id @default(autoincrement())
  tenantId        Int
  nombre          String
  ciudadOrigenId  Int // Ciudad de inicio de la ruta completa
  ciudadDestinoId Int // Ciudad final de la ruta completa
  distanciaTotal  Decimal? @db.Decimal(10, 2)
  duracionTotal   Int // en minutos
  precioCompleto  Decimal  @db.Decimal(10, 2)
  resolucionId    Int
  descripcion     String?
  activo          Boolean  @default(true)
  fechaCreacion   DateTime @default(now())

  // Relaciones
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  ciudadOrigen  Ciudad        @relation("RutaOrigen", fields: [ciudadOrigenId], references: [id])
  ciudadDestino Ciudad        @relation("RutaDestino", fields: [ciudadDestinoId], references: [id])
  resolucion    ResolucionANT @relation(fields: [resolucionId], references: [id])
  paradas       ParadaRuta[] // Paradas intermedias ordenadas
  horarios      HorarioRuta[] // Horarios de salida de la ruta
  viajes        Viaje[] // Instancias específicas de la ruta

  @@unique([tenantId, nombre])
  @@index([tenantId, ciudadOrigenId, ciudadDestinoId]) // Índice para búsquedas eficientes
  @@map("rutas")
}

// NUEVO: Paradas intermedias simplificadas
model ParadaRuta {
  id                  Int      @id @default(autoincrement())
  rutaId              Int
  ciudadId            Int
  orden               Int // Orden en la ruta (0 = origen, último = destino)
  distanciaAcumulada  Decimal? @db.Decimal(10, 2) // Desde el origen
  tiempoAcumulado     Int // Minutos desde el origen
  precioAcumulado     Decimal  @db.Decimal(10, 2) // Precio desde el origen
  esParadaObligatoria Boolean  @default(true)

  // Relaciones
  ruta   Ruta   @relation(fields: [rutaId], references: [id], onDelete: Cascade)
  ciudad Ciudad @relation(fields: [ciudadId], references: [id])

  // Para boletos que inician/terminan en esta parada
  boletosOrigen  Boleto[] @relation("ParadaOrigen")
  boletosDestino Boleto[] @relation("ParadaDestino")

  // Para ocupaciones de asientos
  ocupacionesOrigen  OcupacionAsiento[] @relation("OcupacionOrigen")
  ocupacionesDestino OcupacionAsiento[] @relation("OcupacionDestino")

  @@unique([rutaId, orden])
  @@unique([rutaId, ciudadId])
  @@index([rutaId, orden]) // Para búsquedas ordenadas
  @@map("paradas_ruta")
}

// NUEVO: Horarios simplificados
model HorarioRuta {
  id         Int       @id @default(autoincrement())
  rutaId     Int
  horaSalida DateTime  @db.Time // Solo la hora, no fecha completa
  diasSemana String // "1111111" o "1111100" etc
  tipoViaje  TipoViaje @default(CON_PARADAS)
  activo     Boolean   @default(true)

  // Relaciones
  ruta   Ruta    @relation(fields: [rutaId], references: [id], onDelete: Cascade)
  viajes Viaje[] // Instancias específicas generadas

  @@map("horarios_ruta")
}

// NUEVO: Reemplaza HojaTrabajo con concepto más claro
model Viaje {
  id               Int            @id @default(autoincrement())
  tenantId         Int
  rutaId           Int
  horarioRutaId    Int
  busId            Int
  conductorId      Int?
  ayudanteId       Int?
  fecha            DateTime       @db.Date
  horaSalidaReal   DateTime // Hora específica del viaje
  estado           EstadoViaje    @default(PROGRAMADO)
  observaciones    String?
  capacidadTotal   Int // Cache del total de asientos
  asientosOcupados Int            @default(0) // Cache para performance
  generacion       TipoGeneracion @default(AUTOMATICA)

  // Relaciones
  tenant      Tenant         @relation(fields: [tenantId], references: [id])
  ruta        Ruta           @relation(fields: [rutaId], references: [id])
  horarioRuta HorarioRuta    @relation(fields: [horarioRutaId], references: [id])
  bus         Bus            @relation(fields: [busId], references: [id])
  conductor   UsuarioTenant? @relation("ViajesConductor", fields: [conductorId], references: [id])
  ayudante    UsuarioTenant? @relation("ViajesAyudante", fields: [ayudanteId], references: [id])

  boletos     Boleto[]
  ventas      Venta[]
  ocupaciones OcupacionAsiento[] // Gestión eficiente de ocupación por segmentos

  @@unique([rutaId, fecha, horarioRutaId, busId])
  @@index([tenantId, fecha, estado])
  @@index([fecha, rutaId, estado]) // Para búsquedas de disponibilidad
  @@map("viajes")
}

// NUEVO: Gestión eficiente de ocupación de asientos por segmentos
model OcupacionAsiento {
  id              Int @id @default(autoincrement())
  viajeId         Int
  asientoId       Int
  paradaOrigenId  Int // Parada donde se ocupa
  paradaDestinoId Int // Parada donde se libera
  boletoId        Int

  // Relaciones
  viaje         Viaje      @relation(fields: [viajeId], references: [id], onDelete: Cascade)
  asiento       Asiento    @relation(fields: [asientoId], references: [id])
  paradaOrigen  ParadaRuta @relation("OcupacionOrigen", fields: [paradaOrigenId], references: [id])
  paradaDestino ParadaRuta @relation("OcupacionDestino", fields: [paradaDestinoId], references: [id])
  boleto        Boleto     @relation(fields: [boletoId], references: [id], onDelete: Cascade)

  @@unique([viajeId, asientoId, paradaOrigenId, paradaDestinoId])
  @@index([viajeId, paradaOrigenId, paradaDestinoId]) // Para consultas de disponibilidad
  @@map("ocupacion_asientos")
}

// MODELOS PARA CONFIGURACIÓN DE PRECIOS

model ConfiguracionDescuento {
  id                 Int           @id @default(autoincrement())
  tenantId           Int
  tipo               TipoDescuento
  porcentaje         Decimal       @db.Decimal(5, 2)
  requiereValidacion Boolean       @default(true)
  activo             Boolean       @default(true)

  // Relaciones
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, tipo])
  @@index([tenantId])
  @@map("configuracion_descuentos")
}

// MODELOS PARA VENTAS Y BOLETOS

model MetodoPago {
  id            Int     @id @default(autoincrement())
  tenantId      Int
  nombre        String
  descripcion   String?
  procesador    String?
  configuracion String?
  activo        Boolean @default(true)

  // Relaciones
  tenant Tenant  @relation(fields: [tenantId], references: [id])
  ventas Venta[]

  @@unique([tenantId, nombre])
  @@index([tenantId])
  @@map("metodos_pago")
}

model Venta {
  id                Int         @id @default(autoincrement())
  tenantId          Int
  viajeId           Int // CAMBIADO: ahora apunta directamente al viaje
  usuarioId         Int
  oficinistaId      Int?
  fechaVenta        DateTime    @default(now())
  metodoPagoId      Int
  totalSinDescuento Decimal     @db.Decimal(10, 2)
  totalDescuentos   Decimal     @default(0) @db.Decimal(10, 2)
  totalFinal        Decimal     @db.Decimal(10, 2)
  estadoPago        EstadoPago  @default(PENDIENTE)
  comprobanteUrl    String?
  codigoTransaccion String?
  origenVenta       OrigenVenta
  ipCompra          String?
  dispositivoInfo   String?
  notas             String?

  // Relaciones
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  viaje      Viaje      @relation(fields: [viajeId], references: [id]) // CAMBIADO
  comprador  Usuario    @relation("comprador", fields: [usuarioId], references: [id])
  oficinista Usuario?   @relation("oficinista", fields: [oficinistaId], references: [id])
  metodoPago MetodoPago @relation(fields: [metodoPagoId], references: [id])
  boletos    Boleto[]

  @@index([tenantId])
  @@index([viajeId, estadoPago]) // Para consultas de ventas por viaje
  @@map("ventas")
}

// BOLETO SIMPLIFICADO
model Boleto {
  id                  Int                  @id @default(autoincrement())
  tenantId            Int
  ventaId             Int
  viajeId             Int // NUEVO: relación directa con el viaje
  clienteId           Int
  asientoId           Int
  paradaOrigenId      Int // CAMBIADO: ahora apunta a ParadaRuta
  paradaDestinoId     Int // CAMBIADO: ahora apunta a ParadaRuta
  fechaViaje          DateTime             @db.Date
  horaSalida          DateTime             @db.Time
  precioBase          Decimal              @db.Decimal(10, 2)
  tipoDescuento       TipoDescuentoCliente @default(NINGUNO)
  porcentajeDescuento Decimal              @default(0) @db.Decimal(5, 2)
  precioFinal         Decimal              @db.Decimal(10, 2)
  codigoAcceso        String               @unique
  estado              EstadoBoleto         @default(PENDIENTE)

  // Relaciones
  tenant        Tenant     @relation(fields: [tenantId], references: [id])
  venta         Venta      @relation(fields: [ventaId], references: [id])
  viaje         Viaje      @relation(fields: [viajeId], references: [id]) // NUEVO
  cliente       Cliente    @relation(fields: [clienteId], references: [id])
  asiento       Asiento    @relation(fields: [asientoId], references: [id])
  paradaOrigen  ParadaRuta @relation("ParadaOrigen", fields: [paradaOrigenId], references: [id]) // CAMBIADO
  paradaDestino ParadaRuta @relation("ParadaDestino", fields: [paradaDestinoId], references: [id]) // CAMBIADO

  ocupaciones       OcupacionAsiento[] // NUEVO: relaciones con ocupaciones
  registrosAbordaje RegistroAbordaje[]

  @@index([tenantId])
  @@index([fechaViaje, estado])
  @@index([clienteId, fechaViaje])
  @@index([viajeId, paradaOrigenId, paradaDestinoId]) // NUEVO: para búsquedas de ocupación
  @@map("boletos")
}

model RegistroAbordaje {
  id              Int            @id @default(autoincrement())
  boletoId        Int
  usuarioId       Int
  fechaHora       DateTime       @default(now())
  metodo          MetodoAbordaje @default(ESCANEO)
  dispositivoInfo String?
  latitud         Decimal?       @db.Decimal(10, 6)
  longitud        Decimal?       @db.Decimal(10, 6)
  observaciones   String?

  // Relaciones
  boleto      Boleto  @relation(fields: [boletoId], references: [id])
  registrador Usuario @relation("registrador", fields: [usuarioId], references: [id])

  @@map("registros_abordaje")
}

model Configuracion {
  id                Int               @id @default(autoincrement())
  tenantId          Int
  clave             String
  valor             String?
  tipo              TipoConfiguracion
  descripcion       String?
  fechaModificacion DateTime          @default(now())

  // Relaciones
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, clave])
  @@index([tenantId])
  @@map("configuraciones")
}

model Notificacion {
  id                 Int              @id @default(autoincrement())
  tenantId           Int
  usuarioId          Int
  tipo               TipoNotificacion
  titulo             String
  mensaje            String
  fechaCreacion      DateTime         @default(now())
  fechaLectura       DateTime?
  entidadRelacionada String?
  entidadId          Int?
  accionUrl          String?
  leida              Boolean          @default(false)

  // Relaciones
  tenant  Tenant  @relation(fields: [tenantId], references: [id])
  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@index([tenantId])
  @@map("notificaciones")
}

// ENUMERACIONES

enum TipoDocumento {
  CEDULA
  PASAPORTE
  NIT
}

enum TipoUsuario {
  CLIENTE
  ADMIN_SISTEMA
  PERSONAL_COOPERATIVA
}

enum RolUsuario {
  ADMIN_COOPERATIVA
  OFICINISTA
  CONDUCTOR
  AYUDANTE
}

enum EstadoBus {
  ACTIVO
  MANTENIMIENTO
  RETIRADO
}

enum EstadoAsiento {
  DISPONIBLE
  OCUPADO
  MANTENIMIENTO
  RESERVADO
}

enum TipoViaje {
  DIRECTO
  CON_PARADAS
}

enum TipoDescuento {
  MENOR_EDAD
  TERCERA_EDAD
  DISCAPACIDAD
}

// NUEVO: Estados de viaje más claros
enum EstadoViaje {
  PROGRAMADO
  EN_RUTA
  COMPLETADO
  CANCELADO
  RETRASADO
}

enum TipoGeneracion {
  MANUAL
  AUTOMATICA
}

enum EstadoPago {
  PENDIENTE
  VERIFICANDO
  APROBADO
  RECHAZADO
}

enum OrigenVenta {
  WEB
  MOVIL
  OFICINA
}

enum TipoDescuentoCliente {
  NINGUNO
  MENOR_EDAD
  TERCERA_EDAD
  DISCAPACIDAD
}

enum EstadoBoleto {
  PENDIENTE
  CONFIRMADO
  ABORDADO
  NO_SHOW
  CANCELADO
}

enum MetodoAbordaje {
  ESCANEO
  MANUAL
}

enum TipoConfiguracion {
  TEXTO
  NUMERO
  BOOLEANO
  JSON
}

enum TipoNotificacion {
  COMPRA
  CAMBIO_ESTADO
  RECORDATORIO
  PROMOCION
  SISTEMA
}
