generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELOS PRINCIPALES

model Tenant {
  id              Int      @id @default(autoincrement())
  nombre          String
  identificador   String   @unique // Para subdominios/rutas
  logoUrl         String?
  colorPrimario   String?
  colorSecundario String?
  sitioWeb        String?
  emailContacto   String?
  telefono        String?
  fechaRegistro   DateTime @default(now())
  activo          Boolean  @default(true)

  // Relaciones
  usuarios                UsuarioTenant[]
  buses                   Bus[]
  tiposAsiento            TipoAsiento[]
  rutas                   Ruta[] // NUEVO: reemplaza frecuenciasAsignadas
  configuracionDescuentos ConfiguracionDescuento[]
  hojasTrabajo            HojaTrabajo[]
  ventas                  Venta[]
  boletos                 Boleto[]
  configuraciones         Configuracion[]
  notificaciones          Notificacion[]
  metodosPago             MetodoPago[]

  @@map("tenants")
}

model Usuario {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  passwordHash  String
  fechaRegistro DateTime    @default(now())
  ultimoAcceso  DateTime?
  activo        Boolean     @default(true)
  tipoUsuario   TipoUsuario @default(CLIENTE)

  // Relaciones
  tenants                 UsuarioTenant[]
  ventasComprador         Venta[]            @relation("comprador")
  ventasOficinista        Venta[]            @relation("oficinista")
  cliente                 Cliente?
  registrosAbordaje       RegistroAbordaje[] @relation("registrador")
  notificacionesRecibidas Notificacion[]

  @@map("usuarios")
}

// Modelo Cliente-Usuario separado
model Cliente {
  id                     Int           @id @default(autoincrement())
  nombres                String
  apellidos              String
  tipoDocumento          TipoDocumento @default(CEDULA)
  numeroDocumento        String
  telefono               String?
  email                  String?
  fechaNacimiento        DateTime?
  esDiscapacitado        Boolean       @default(false)
  porcentajeDiscapacidad Decimal?      @db.Decimal(5, 2)
  usuarioId              Int?          @unique // Vínculo opcional a Usuario
  fechaRegistro          DateTime      @default(now())
  ultimaActualizacion    DateTime      @default(now())
  activo                 Boolean       @default(true)

  // Relaciones
  usuario Usuario? @relation(fields: [usuarioId], references: [id])
  boletos Boleto[]

  @@unique([tipoDocumento, numeroDocumento])
  @@map("clientes")
}

model UsuarioTenant {
  id              Int        @id @default(autoincrement())
  usuarioId       Int
  tenantId        Int
  rol             RolUsuario
  fechaAsignacion DateTime   @default(now())
  activo          Boolean    @default(true)

  // Relaciones
  usuario Usuario @relation(fields: [usuarioId], references: [id])
  tenant  Tenant  @relation(fields: [tenantId], references: [id])

  // Relaciones con hojas de trabajo
  hojasTrabajoConductor HojaTrabajo[] @relation("HojasConductor")
  hojaTrabajoAyudante   HojaTrabajo[] @relation("HojasAyudante")

  @@unique([usuarioId, tenantId, rol])
  @@map("usuarios_tenants")
}

model Ciudad {
  id        Int      @id @default(autoincrement())
  nombre    String
  provincia String
  latitud   Decimal? @db.Decimal(10, 6)
  longitud  Decimal? @db.Decimal(10, 6)
  activo    Boolean  @default(true)

  // Relaciones actualizadas
  segmentosOrigen  Segmento[] @relation("CiudadSegmentoOrigen")
  segmentosDestino Segmento[] @relation("CiudadSegmentoDestino")

  @@map("ciudades")
}

model ResolucionANT {
  id               Int       @id @default(autoincrement())
  numeroResolucion String
  fechaEmision     DateTime
  fechaVigencia    DateTime?
  documentoUrl     String?
  descripcion      String?
  activo           Boolean   @default(true)

  // Relaciones actualizadas
  rutas Ruta[]

  @@map("resoluciones_ant")
}

// MODELOS PARA BUSES Y CONFIGURACIÓN DE ASIENTOS

// Modelo para plantillas de buses
model ModeloBus {
  id             Int     @id @default(autoincrement())
  marca          String
  modelo         String
  tipoChasis     String?
  tipoCarroceria String?
  anioModelo     Int?
  numeroPisos    Int     @default(1)
  descripcion    String?
  esPublico      Boolean @default(true)

  // Relaciones
  plantillasPiso PlantillaPiso[]
  buses          Bus[]

  @@unique([marca, modelo])
  @@map("modelos_bus")
}

// Plantillas de distribución de asientos para pisos
model PlantillaPiso {
  id          Int     @id @default(autoincrement())
  modeloBusId Int
  numeroPiso  Int
  filas       Int
  columnas    Int
  descripcion String?
  esPublico   Boolean @default(true)

  // Relaciones
  modeloBus          ModeloBus                   @relation(fields: [modeloBusId], references: [id])
  ubicacionesAsiento UbicacionAsientoPlantilla[]
  pisosBus           PisoBus[]

  @@unique([modeloBusId, numeroPiso])
  @@map("plantillas_piso")
}

// Posiciones de asientos en la plantilla
model UbicacionAsientoPlantilla {
  id              Int     @id @default(autoincrement())
  plantillaPisoId Int
  fila            Int
  columna         Int
  estaHabilitado  Boolean @default(true)

  // Relaciones
  plantillaPiso PlantillaPiso @relation(fields: [plantillaPisoId], references: [id], onDelete: Cascade)

  @@unique([plantillaPisoId, fila, columna])
  @@map("ubicaciones_asiento_plantilla")
}

model Bus {
  id              Int       @id @default(autoincrement())
  tenantId        Int // Discriminador de tenant
  modeloBusId     Int
  numero          Int
  placa           String
  anioFabricacion Int?
  totalAsientos   Int
  fotoUrl         String?
  tipoCombustible String?
  fechaIngreso    DateTime
  estado          EstadoBus @default(ACTIVO)

  // Relaciones
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  modeloBus       ModeloBus           @relation(fields: [modeloBusId], references: [id])
  pisos           PisoBus[]
  hojasTrabajo    HojaTrabajo[]
  caracteristicas CaracteristicaBus[]

  @@unique([tenantId, placa])
  @@unique([tenantId, numero])
  @@index([tenantId])
  @@map("buses")
}

// Modelo para pisos de buses
model PisoBus {
  id              Int  @id @default(autoincrement())
  busId           Int
  numeroPiso      Int
  plantillaPisoId Int?

  // Relaciones
  bus           Bus            @relation(fields: [busId], references: [id], onDelete: Cascade)
  plantillaPiso PlantillaPiso? @relation(fields: [plantillaPisoId], references: [id])
  asientos      Asiento[]

  @@unique([busId, numeroPiso])
  @@map("pisos_bus")
}

// Características del bus
model CaracteristicaBus {
  id     Int    @id @default(autoincrement())
  busId  Int
  nombre String
  valor  String

  // Relaciones
  bus Bus @relation(fields: [busId], references: [id], onDelete: Cascade)

  @@unique([busId, nombre])
  @@map("caracteristicas_bus")
}

model TipoAsiento {
  id           Int     @id @default(autoincrement())
  tenantId     Int // Discriminador de tenant
  nombre       String
  descripcion  String?
  factorPrecio Decimal @default(1.00) @db.Decimal(5, 2)
  color        String?
  icono        String?
  activo       Boolean @default(true)

  // Relaciones
  tenant   Tenant    @relation(fields: [tenantId], references: [id])
  asientos Asiento[]

  @@unique([tenantId, nombre])
  @@index([tenantId])
  @@map("tipos_asiento")
}

model Asiento {
  id        Int           @id @default(autoincrement())
  pisoBusId Int
  numero    String
  fila      Int
  columna   Int
  tipoId    Int
  estado    EstadoAsiento @default(DISPONIBLE)
  notas     String?

  // Relaciones
  pisoBus PisoBus     @relation(fields: [pisoBusId], references: [id])
  tipo    TipoAsiento @relation(fields: [tipoId], references: [id])
  boletos Boleto[]

  @@unique([pisoBusId, numero])
  @@map("asientos")
}

// MODELOS PARA RUTAS Y PROGRAMACIONES (REEMPLAZAN A FRECUENCIAS)

model Ruta {
  id            Int      @id @default(autoincrement())
  tenantId      Int // Discriminador de tenant
  resolucionId  Int
  nombre        String
  descripcion   String?
  activo        Boolean  @default(true)
  fechaCreacion DateTime @default(now())

  // Relaciones
  tenant         Tenant         @relation(fields: [tenantId], references: [id])
  resolucion     ResolucionANT  @relation(fields: [resolucionId], references: [id])
  segmentos      Segmento[]
  programaciones Programacion[]

  @@unique([tenantId, nombre])
  @@index([tenantId])
  @@map("rutas")
}

model Segmento {
  id              Int      @id @default(autoincrement())
  rutaId          Int
  ordenSegmento   Int
  ciudadOrigenId  Int
  ciudadDestinoId Int
  distancia       Decimal? @db.Decimal(10, 2)
  duracion        Int // en minutos
  precioBase      Decimal  @db.Decimal(10, 2)
  activo          Boolean  @default(true)

  // Relaciones
  ruta          Ruta      @relation(fields: [rutaId], references: [id])
  ciudadOrigen  Ciudad    @relation("CiudadSegmentoOrigen", fields: [ciudadOrigenId], references: [id])
  ciudadDestino Ciudad    @relation("CiudadSegmentoDestino", fields: [ciudadDestinoId], references: [id])
  horarios      Horario[]
  boletosInicio Boleto[]  @relation("SegmentoInicio")
  boletosFin    Boleto[]  @relation("SegmentoFin")

  @@unique([rutaId, ordenSegmento])
  @@unique([rutaId, ciudadOrigenId, ciudadDestinoId])
  @@map("segmentos")
}

model Programacion {
  id            Int       @id @default(autoincrement())
  rutaId        Int
  horaSalida    DateTime
  diasOperacion String // 7 caracteres, uno por día "1111100"
  tipoViaje     TipoViaje @default(CON_PARADAS)
  activo        Boolean   @default(true)

  // Relaciones
  ruta         Ruta          @relation(fields: [rutaId], references: [id])
  horarios     Horario[]
  hojasTrabajo HojaTrabajo[]

  @@map("programaciones")
}

model Horario {
  id                 Int      @id @default(autoincrement())
  programacionId     Int
  segmentoId         Int
  horaLlegadaOrigen  DateTime
  horaSalidaOrigen   DateTime
  horaLlegadaDestino DateTime

  // Relaciones
  programacion Programacion @relation(fields: [programacionId], references: [id])
  segmento     Segmento     @relation(fields: [segmentoId], references: [id])

  @@unique([programacionId, segmentoId])
  @@map("horarios")
}

// MODELOS PARA CONFIGURACIÓN DE PRECIOS

model ConfiguracionDescuento {
  id                 Int           @id @default(autoincrement())
  tenantId           Int // Discriminador de tenant
  tipo               TipoDescuento
  porcentaje         Decimal       @db.Decimal(5, 2)
  requiereValidacion Boolean       @default(true)
  activo             Boolean       @default(true)

  // Relaciones
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, tipo])
  @@index([tenantId])
  @@map("configuracion_descuentos")
}

// MODELOS PARA PROGRAMACIÓN Y VIAJES

model HojaTrabajo {
  id             Int               @id @default(autoincrement())
  tenantId       Int // Discriminador de tenant
  fecha          DateTime          @db.Date
  programacionId Int // Cambiado desde frecuenciaHabilitadaId
  busId          Int
  conductorId    Int?
  ayudanteId     Int?
  estado         EstadoHojaTrabajo @default(PROGRAMADO)
  observaciones  String?
  generacion     TipoGeneracion

  // Relaciones
  tenant       Tenant         @relation(fields: [tenantId], references: [id])
  programacion Programacion   @relation(fields: [programacionId], references: [id]) // Relación actualizada
  bus          Bus            @relation(fields: [busId], references: [id])
  conductor    UsuarioTenant? @relation("HojasConductor", fields: [conductorId], references: [id])
  ayudante     UsuarioTenant? @relation("HojasAyudante", fields: [ayudanteId], references: [id])
  ventas       Venta[]

  @@unique([tenantId, fecha, programacionId])
  @@index([tenantId])
  @@map("hoja_trabajo")
}

// MODELOS PARA VENTAS Y BOLETOS

model MetodoPago {
  id            Int     @id @default(autoincrement())
  tenantId      Int
  nombre        String
  descripcion   String?
  procesador    String? // PayPal, Transferencia, etc.
  configuracion String? // Datos de configuración como cuenta, merchant ID, etc.
  activo        Boolean @default(true)

  // Relaciones
  tenant Tenant  @relation(fields: [tenantId], references: [id])
  ventas Venta[]

  @@unique([tenantId, nombre])
  @@index([tenantId])
  @@map("metodos_pago")
}

model Venta {
  id                Int         @id @default(autoincrement())
  tenantId          Int // Discriminador de tenant
  hojaId            Int
  usuarioId         Int // Comprador o oficinista
  oficinistaId      Int? // NULL si es compra directa
  fechaVenta        DateTime    @default(now())
  metodoPagoId      Int
  totalSinDescuento Decimal     @db.Decimal(10, 2)
  totalDescuentos   Decimal     @default(0) @db.Decimal(10, 2)
  totalFinal        Decimal     @db.Decimal(10, 2)
  estadoPago        EstadoPago  @default(PENDIENTE)
  comprobanteUrl    String?
  codigoTransaccion String?
  origenVenta       OrigenVenta
  ipCompra          String?
  dispositivoInfo   String?
  notas             String?

  // Relaciones
  tenant      Tenant      @relation(fields: [tenantId], references: [id])
  hojaTrabajo HojaTrabajo @relation(fields: [hojaId], references: [id])
  comprador   Usuario     @relation("comprador", fields: [usuarioId], references: [id])
  oficinista  Usuario?    @relation("oficinista", fields: [oficinistaId], references: [id])
  metodoPago  MetodoPago  @relation(fields: [metodoPagoId], references: [id])
  boletos     Boleto[]

  @@index([tenantId])
  @@map("ventas")
}

model Boleto {
  id                  Int                  @id @default(autoincrement())
  tenantId            Int // Mantenido para rendimiento en consultas
  ventaId             Int
  clienteId           Int
  asientoId           Int
  segmentoInicioId    Int // Nuevo: Segmento donde sube el pasajero
  segmentoFinId       Int // Nuevo: Segmento donde baja el pasajero
  fechaViaje          DateTime             @db.Date
  horaSalida          DateTime
  precioBase          Decimal              @db.Decimal(10, 2)
  tipoDescuento       TipoDescuentoCliente @default(NINGUNO)
  porcentajeDescuento Decimal              @default(0) @db.Decimal(5, 2)
  precioFinal         Decimal              @db.Decimal(10, 2)
  codigoAcceso        String               @unique
  estado              EstadoBoleto         @default(PENDIENTE)

  // Relaciones
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  venta             Venta              @relation(fields: [ventaId], references: [id])
  cliente           Cliente            @relation(fields: [clienteId], references: [id])
  asiento           Asiento            @relation(fields: [asientoId], references: [id])
  segmentoInicio    Segmento           @relation("SegmentoInicio", fields: [segmentoInicioId], references: [id])
  segmentoFin       Segmento           @relation("SegmentoFin", fields: [segmentoFinId], references: [id])
  registrosAbordaje RegistroAbordaje[]

  @@index([tenantId])
  @@index([fechaViaje, estado])
  @@index([clienteId, fechaViaje])
  @@map("boletos")
}

model RegistroAbordaje {
  id              Int            @id @default(autoincrement())
  boletoId        Int
  usuarioId       Int // Quien registra (chofer/ayudante)
  fechaHora       DateTime       @default(now())
  metodo          MetodoAbordaje @default(ESCANEO)
  dispositivoInfo String?
  latitud         Decimal?       @db.Decimal(10, 6)
  longitud        Decimal?       @db.Decimal(10, 6)
  observaciones   String?

  // Relaciones
  boleto      Boleto  @relation(fields: [boletoId], references: [id])
  registrador Usuario @relation("registrador", fields: [usuarioId], references: [id])

  @@map("registros_abordaje")
}

model Configuracion {
  id                Int               @id @default(autoincrement())
  tenantId          Int // Discriminador de tenant
  clave             String
  valor             String?
  tipo              TipoConfiguracion
  descripcion       String?
  fechaModificacion DateTime          @default(now())

  // Relaciones
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, clave])
  @@index([tenantId])
  @@map("configuraciones")
}

model Notificacion {
  id                 Int              @id @default(autoincrement())
  tenantId           Int // Discriminador de tenant
  usuarioId          Int
  tipo               TipoNotificacion
  titulo             String
  mensaje            String
  fechaCreacion      DateTime         @default(now())
  fechaLectura       DateTime?
  entidadRelacionada String?
  entidadId          Int?
  accionUrl          String?
  leida              Boolean          @default(false)

  // Relaciones
  tenant  Tenant  @relation(fields: [tenantId], references: [id])
  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@index([tenantId])
  @@map("notificaciones")
}

enum TipoDocumento {
  CEDULA
  PASAPORTE
  NIT
}

// ENUMERACIONES

enum TipoUsuario {
  CLIENTE
  ADMIN_SISTEMA
  PERSONAL_COOPERATIVA
}

enum RolUsuario {
  ADMIN_COOPERATIVA
  OFICINISTA
  CONDUCTOR
  AYUDANTE
}

enum EstadoBus {
  ACTIVO
  MANTENIMIENTO
  RETIRADO
}

enum EstadoAsiento {
  DISPONIBLE
  OCUPADO
  MANTENIMIENTO
  RESERVADO
}

enum TipoViaje {
  DIRECTO
  CON_PARADAS
}

enum TipoDescuento {
  MENOR_EDAD
  TERCERA_EDAD
  DISCAPACIDAD
}

enum EstadoHojaTrabajo {
  PROGRAMADO
  EN_CURSO
  COMPLETADO
  CANCELADO
}

enum TipoGeneracion {
  MANUAL
  AUTOMATICA
}

enum EstadoPago {
  PENDIENTE
  VERIFICANDO
  APROBADO
  RECHAZADO
}

enum OrigenVenta {
  WEB
  MOVIL
  OFICINA
}

enum TipoDescuentoCliente {
  NINGUNO
  MENOR_EDAD
  TERCERA_EDAD
  DISCAPACIDAD
}

enum EstadoBoleto {
  PENDIENTE
  CONFIRMADO
  ABORDADO
  NO_SHOW
  CANCELADO
}

enum MetodoAbordaje {
  ESCANEO
  MANUAL
}

enum TipoConfiguracion {
  TEXTO
  NUMERO
  BOOLEANO
  JSON
}

enum TipoNotificacion {
  COMPRA
  CAMBIO_ESTADO
  RECORDATORIO
  PROMOCION
  SISTEMA
}
